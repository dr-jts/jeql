/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package jeql.syntax.parser;
import java.util.*;
import jeql.syntax.*;
import jeql.syntax.util.*;
import jeql.util.*;
import com.vividsolutions.jts.geom.*;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(3, 0);
      case 10:
         jjmatchedKind = 4;
         return jjMoveNfa_0(3, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_0(3, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(3, 0);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 37:
         jjmatchedKind = 85;
         return jjMoveNfa_0(3, 0);
      case 40:
         jjmatchedKind = 83;
         return jjMoveNfa_0(3, 0);
      case 41:
         jjmatchedKind = 84;
         return jjMoveNfa_0(3, 0);
      case 42:
         jjmatchedKind = 67;
         return jjMoveNfa_0(3, 0);
      case 43:
         jjmatchedKind = 86;
         return jjMoveNfa_0(3, 0);
      case 44:
         jjmatchedKind = 69;
         return jjMoveNfa_0(3, 0);
      case 45:
         jjmatchedKind = 76;
         return jjMoveNfa_0(3, 0);
      case 46:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 47:
         jjmatchedKind = 90;
         return jjMoveNfa_0(3, 0);
      case 58:
         jjmatchedKind = 68;
         return jjMoveNfa_0(3, 0);
      case 59:
         jjmatchedKind = 91;
         return jjMoveNfa_0(3, 0);
      case 60:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4400L);
      case 61:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 62:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 63:
         jjmatchedKind = 89;
         return jjMoveNfa_0(3, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x380L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x10000000000400L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x3000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8000003c000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x8000000080000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x300003000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x7000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0xf8000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0xc00100000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 91:
         jjmatchedKind = 81;
         return jjMoveNfa_0(3, 0);
      case 93:
         jjmatchedKind = 82;
         return jjMoveNfa_0(3, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x380L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3c000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0xf8000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 123:
         jjmatchedKind = 79;
         return jjMoveNfa_0(3, 0);
      case 125:
         jjmatchedKind = 80;
         return jjMoveNfa_0(3, 0);
      case 126:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000800L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000401001000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x320202002000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000100000L, active1, 0L);
      case 78:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x408080L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c40004800000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 82:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1400c0000L, active1, 0L);
      case 83:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000080000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L, active1, 0L);
      case 89:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000800L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x401001000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20202002000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x408080L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40004800000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1400c0000L, active1, 0L);
      case 115:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L, active1, 0L);
      case 121:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(3, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 1);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 67:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 68:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x1a000000000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000820000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x7404c00000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000400000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x80001000c0000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000100000L);
      case 82:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x7800L);
      case 84:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20080000000L);
      case 88:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         break;
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 99:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1a000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x820000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4c00000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000c0000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x7800L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20080000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 2);
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3004c0410000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 72:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 77:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 78:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x8020000L);
      case 84:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7080000002000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000L);
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 99:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4c0410000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 109:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8020000L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 69:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8004008000000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x7000000002000L);
      case 80:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 82:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100100000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 84:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 89:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4008000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 112:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100100000L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 83:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         break;
      case 84:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8200000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 5);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 77:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
         }
         break;
      case 78:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x8300000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 6);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x1300000000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 84:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 7);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x1300000000000L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 8);
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L);
      case 84:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 9);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 10);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L);
      case 78:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 11;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 11);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 12);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 13);
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 14;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 14);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 15);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 15);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 16);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 16);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 17);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 87;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAddStates(7, 11);
                  }
                  else if (curChar == 47)
                     jjAddStates(12, 13);
                  else if (curChar == 46)
                     jjAddStates(14, 15);
                  else if (curChar == 35)
                     jjCheckNAdd(23);
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  if (curChar == 36)
                     jjAddStates(22, 23);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 13:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 15:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 16:
                  if (curChar == 34 && kind > 61)
                     kind = 61;
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 18:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 20:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 21:
                  if (curChar == 39 && kind > 61)
                     kind = 61;
                  break;
               case 22:
                  if (curChar == 35)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(23);
                  break;
               case 25:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 27:
                  if (curChar == 36)
                     jjAddStates(22, 23);
                  break;
               case 28:
                  if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  break;
               case 29:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 31:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 32:
                  if (curChar == 34 && kind > 63)
                     kind = 63;
                  break;
               case 33:
                  if (curChar == 39)
                     jjCheckNAddStates(29, 31);
                  break;
               case 34:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 36:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 37:
                  if (curChar == 39 && kind > 63)
                     kind = 63;
                  break;
               case 39:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 39 && kind > 62)
                     kind = 62;
                  break;
               case 45:
                  if (curChar == 46)
                     jjAddStates(14, 15);
                  break;
               case 46:
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 50:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(34, 36);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(58);
                  break;
               case 59:
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(0, 6);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(62, 48);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(37, 39);
                  break;
               case 64:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(66, 48);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if (curChar == 47)
                     jjAddStates(12, 13);
                  break;
               case 73:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(74);
                  break;
               case 75:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 76:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if (curChar == 42)
                     jjCheckNAddStates(40, 42);
                  break;
               case 78:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(79, 77);
                  break;
               case 79:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(79, 77);
                  break;
               case 80:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 81:
                  if (curChar != 36)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddStates(7, 11);
                  break;
               case 82:
                  if (curChar != 36)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(83);
                  break;
               case 84:
                  if (curChar == 36)
                     jjCheckNAddStates(43, 45);
                  break;
               case 85:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               case 86:
                  if (curChar == 58 && kind > 65)
                     kind = 65;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAddStates(7, 11);
                  }
                  else if (curChar == 92)
                     jjAddStates(46, 47);
                  else if (curChar == 91)
                     jjCheckNAddTwoStates(25, 26);
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 101 && kind > 57)
                     kind = 57;
                  break;
               case 1:
                  if (curChar == 117)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 115)
                     jjCheckNAdd(0);
                  break;
               case 5:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 108 && kind > 57)
                     kind = 57;
                  break;
               case 9:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 14:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  jjCheckNAddStates(19, 21);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  jjCheckNAddStates(16, 18);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 93 && kind > 64)
                     kind = 64;
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 30:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  jjCheckNAddStates(26, 28);
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  jjCheckNAddStates(29, 31);
                  break;
               case 38:
                  if (curChar == 92)
                     jjAddStates(46, 47);
                  break;
               case 40:
                  jjAddStates(48, 49);
                  break;
               case 43:
                  jjAddStates(50, 51);
                  break;
               case 47:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 54);
                  break;
               case 52:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 55:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjAddStates(55, 56);
                  break;
               case 58:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(62, 48);
                  break;
               case 63:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(37, 39);
                  break;
               case 66:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(66, 48);
                  break;
               case 67:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjAddStates(57, 58);
                  break;
               case 70:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 71:
                  if (curChar != 95)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 74:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  jjCheckNAddTwoStates(76, 77);
                  break;
               case 78:
               case 79:
                  jjCheckNAddTwoStates(79, 77);
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddStates(7, 11);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(83);
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 18:
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 29:
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 34:
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 74:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 78:
               case 79:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(79, 77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 87 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   62, 63, 64, 48, 67, 68, 71, 82, 83, 84, 85, 86, 73, 75, 46, 59, 
   18, 19, 21, 13, 14, 16, 28, 33, 25, 26, 29, 30, 32, 34, 35, 37, 
   50, 53, 54, 55, 56, 63, 64, 48, 77, 78, 80, 84, 85, 86, 39, 42, 
   40, 41, 43, 44, 49, 50, 53, 55, 56, 67, 68, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\105\115\120\124\131", "\114\111\116\105\101\122\122\111\116\107", 
"\114\111\116\105\123\124\122\111\116\107", "\120\117\114\131\107\117\116", "\120\117\111\116\124", 
"\115\125\114\124\111\120\117\111\116\124", "\115\125\114\124\111\114\111\116\105\123\124\122\111\116\107", 
"\115\125\114\124\111\120\117\114\131\107\117\116", "\107\105\117\115\105\124\122\131\103\117\114\114\105\103\124\111\117\116", 
"\102\117\130", null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\75", "\52", "\72", "\54", "\56", "\76", "\76\75", "\74", "\74\75", "\75\75", "\55", 
"\41\75", "\74\76", "\173", "\175", "\133", "\135", "\50", "\51", "\45", "\53", "\176", 
"\176\75", "\77", "\57", "\73", "\56\52", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xe63fffffffffff81L, 0x1fffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x60L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[87];
private final int[] jjstateSet = new int[174];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 87; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
